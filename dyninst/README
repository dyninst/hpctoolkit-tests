This directory contains Dyninst unit tests.  These tests are targeted
at specific features in dyninst that HPCToolkit uses, mostly for
hpcstruct: control-flow graphs, line map info, function symbols, etc.

------------------
Building the tests
------------------

The easiest way to build the tests is with the mk-dyninst.sh script.
First, download and build hpctoolkit-externals.  This builds the
dyninst libraries and their prerequisites.  You will likely want to
use an alternate version of dyninst than the default from externals.

git clone https://github.com/dyninst/dyninst
git checkout ....

git clone https://github.com/hpctoolkit/hpctoolkit-externals
cd hpctoolkit-externals

./configure  \
    --prefix=/path/to/install/dir  \
    --with-dyninst-src=/path/to/dyninst/src/dir
make -j 4

You can either build a full externals (no target or target 'all'), or
build just dyninst and its prereqs (target 'symtabAPI').

Depending on the version of dyninst, you may need to manually adjust
(or remove) externals's patches.  In particular, patch-jump-table is
already applied to some dyninst branches.

cd hpctoolkit-externals/symtabAPI/patches
rm patch-jump-table

Second, compile the test with the mk-dyninst.sh script.  This script
adds the include and lib directories for binutils, boost, libelf,
libdwarf, dyninst and zlib to the compile line.

./mk-dyninst.sh [options]... file.cpp /externals/install/dir

1. CXX and CXXFLAGS are set in the mk-dyninst.sh script.  Put any
extra compiler flags (eg, -fcilkplus for cilk-parse) on the command
line first.

2. Add the C++ source file(s) next.  The script uses the basename of
the first C++ source file (.cpp, .cxx, .cc or .C suffix) as the name
of the program.

3. Put the externals's install directory (prefix) last.

If the build is successful, the script writes the file 'env.sh' that
contains shell commands to set LD_LIBRARY_PATH.

---------------
cilk-parse test
---------------

This test is a proxy for hpcstruct with cilk threads.  It iterates
through the same hierarchy of functions, loops, blocks, instructions,
inline call sequences and line map info, and makes the same queries
that hpcstruct would make.

This program tests that we can make parallel queries to ParseAPI and
SymtabAPI.  For now, we parse the entire binary sequentially and then
use cilk_for to analyze the functions in parallel.

Build the cilk-parse test with the '-fcilkplus' option.  Be sure the
C++ compiler supports cilk, for example, gnu g++ 5.x or later.

./mk-dyninst.sh -fcilkplus cilk-parse.cpp /externals/dir

Run the test with two arguments: the binary file to analyze and
(optionally) the number of threads.  

./cilk-plus filename [num-threads]

If num-threads is not specified, the program will try the
CILK_NWORKERS environment variable.

-------------
callback test
-------------

This test is a proxy for hpcstruct with full threads.  As with the
cilk-parse test (baby threads), it iterates through the same hierarchy
of loops, blocks and instructions and makes the same queries that
hpcstruct would make, and does so via the newfunction_retstatus()
callback function.

This program tests two main things:

1. Does CodeObject::parse() survive threads.  This includes both
parse() running with cilk threads itself (if compiled that way),
and making parallel queries from the newfunction callback.

2. What changes on multiple callbacks.  It is possible for parse() to
finalize a function and deliver its callback multiple times for the
same function.  We compute the set of address ranges covered by the
function and see if later callbacks add new blocks.

Build and run this test the same way as the cilk-parse test with the
-fcilkplus option and a compiler that supports cilk.

./mk-dyninst.sh -fcilkplus callback /externals/dir

Run this test with the name of the file to analyze and (optionally)
the number of threads.

./callback filename [num-threads]

Note: as of April 2017, the only branch that supports running parse()
in parallel is Bill's personal branch on follis.  Use git clone via
ssh: protocol from the following directory on follis, but you need an
account on follis for this.

/p/paradyn/development/bill/dyninst-parallel-parsing.git

Note: as of April 2017, the newfunction callback is only called with
defensive mode turned on, and we don't want defensive mode.  In the
Parser.C file, manually move the newfunction callback outside of the
if (...) test at the bottom of the Parser::parse_frame() function.

cd dyninst/parseAPI/src
vi Parser.C

 void
 Parser::parse_frame(ParseFrame & frame, bool recursive) {
 ...
     if (unlikely(obj().defensiveMode())) {
        // calculate this after setting the function to PARSED, so that when
        // we finalize the function we'll actually save the results and won't 
        // re-finalize it
        func->tampersStack(); 
-       _pcb.newfunction_retstatus( func );
     }
+    _pcb.newfunction_retstatus( func );
 }

--------------
find-gaps test
--------------

This test tries to find gaps in the ParseAPI parsing, that is, address
ranges that are contained within some Symtab Function but are not
covered by the basic blocks of any ParseAPI Function and may be a code
region.

For each gap, we apply the following heuristics to help decide if this
gap may contain code.

1. size of gap -- larger is more suspicious.
2. location of gap -- end of function is less suspicious.
3. is gap in PLT region -- if yes, this is less suspicious.
4. out edges from block before gap -- sink is suspicious.
5. line map info -- if exists, this is very suspicious.

Build the test as:

./mk-dyninst.sh find-gaps.cpp /externals/dir

Run the test as:

./find-gaps filename

